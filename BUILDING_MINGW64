1) Create fresh ubuntu 13.10 VM

2) Install packages
    $ sudo apt-get update && sudo apt-get upgrade
    $ sudo apt-get install build-essential libgmp-dev libgmp3-dev libcrypto++-dev \
        git cmake libboost-all-dev automake libtool libleveldb-dev yasm unzip lzip libminiupnpc-dev \
        mingw-w64 gcc-mingw-w64 g++-mingw-w64 binutils-mingw-w64

3) Build boost for windows:
    $ wget http://downloads.sourceforge.net/project/boost/boost/1.55.0/boost_1_55_0.tar.bz2
    $ tar xjvf boost_1_55_0.tar.bz2
    $ cd boost_1_55_0
    $ ./bootstrap.sh --without-icu
    $ echo "using gcc : mingw32 : x86_64-w64-mingw32-g++ : <rc>x86_64-w64-mingw32-windres <archiver>x86_64-w64-mingw32-ar <ranlib>x86_64-w64-mingw32-ranlib ;" > user-config.jam
    $ sudo ./bjam toolset=gcc address-model=64 target-os=windows variant=release threading=multi threadapi=win32 \
        link=static runtime-link=static --prefix=/usr/x86_64-w64-mingw32 --user-config=user-config.jam \
        --without-mpi --without-python -sNO_BZIP2=1 --layout=tagged install
    $ cd ..

4) Build leveldb for windows:
    $ git clone https://github.com/bitcoin/bitcoin.git
    $ cp bitcoin/src/leveldb ./ -R
    $ cd leveldb
    $ TARGET_OS=NATIVE_WINDOWS CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ AR=x86_64-w64-mingw32-ar \
        make libleveldb.a libmemenv.a
    $ sudo cp include/leveldb /usr/x86_64-w64-mingw32/include/ -R
    $ sudo cp *.a /usr/x86_64-w64-mingw32/lib/
    $ cd ..

5) Build gmp for windows:
    $ wget https://gmplib.org/download/gmp/gmp-5.1.3.tar.lz
    $ lzip -d gmp-5.1.3.tar.lz
    $ tar xvf gmp-5.1.3.tar
    $ mkdir gmp-w64-build
    $ cd gmp-w64-build 
    $ ../gmp-5.1.3/configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
    $ make
    $ sudo make install
    $ cd ..

6) Build miniupnpc for windows:
    $ wget http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.tar.gz -O miniupnpc-1.9.tar.gz
    $ tar xzvf miniupnpc-1.9.tar.gz
    $ cd miniupnpc-1.9
    $ CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar CFLAGS=-I/usr/x86_64-w64-mingw32/include LDFLAGS=-L/usr/x86_64-w64-mingw32/lib make
        (ignore undefined reference errors)
    $ sudo mkdir /usr/x86_64-w64-mingw32/include/miniupnpc
    $ sudo cp *.h /usr/x86_64-w64-mingw32/include/miniupnpc/
    $ sudo cp libminiupnpc.a /usr/x86_64-w64-mingw32/lib/
    $ cd ..

7) Build cryptopp562 for windows:
    $ mkdir cryptopp562
    $ cd cryptopp562
    $ wget http://www.cryptopp.com/cryptopp562.zip
    $ unzip cryptopp562.zip
    $ CXX=x86_64-w64-mingw32-g++ AR=x86_64-w64-mingw32-ar make
    $ x86_64-w64-mingw32-ranlib *.a
    $ cd ..

8) Build secp256k1 for windows:
    $ wget http://gavwood.com/secp256k1.tar.bz2
    $ tar xjvf secp256k1.tar.bz2
    $ cd secp256k1
    $ ./configure
    
    Add the following lines to the end of config.mk:
        CC=x86_64-w64-mingw32-gcc
        AR=x86_64-w64-mingw32-ar
        RANLIB=x86_64-w64-mingw32-ranlib
        CFLAGS_EXTRA+=-I/usr/x86_64-w64-mingw32/include
        LDFLAGS_EXTRA+=-L/usr/x86_64-w64-mingw32/lib

    Edit Makefile, change line:
         $(YASM) -f elf64 -o obj/field_5x52_asm.o src/field_5x52_asm.asm
    to
         $(YASM) -f win64 -o obj/field_5x52_asm.o src/field_5x52_asm.asm

    $ make
    $ cd ..

    Building the dynamic library gave an error, but we only care about the static library.

9) Build cpp-ethereum:
    $ git clone https://github.com/ethereum/cpp-ethereum
    $ cd cpp-ethereum

    $ git add remote codeshark https://github.com/CodeShark/cpp-ethereum
    $ git fetch codeshark

    # replace usleep
    $ sed -i -e 's/usleep\w*(\([^)]\+\))/boost::this_thread::sleep(boost::posix_time::microseconds(\1))/g' $(find -type f -name \*.h -o -name \*.cpp)

    # THE FOLLOWING CHANGES ARE REQUIRED TO DOWNGRADE C++11 FEATURES NOT SUPPORTED BY gcc4.6.3
    # change using a = b; syntax to typedef b a;
    $ sed -i -e 's/using\s\+\([^\w=]\+\)\w*=\w*\([^\;]\+\)/typedef \2 \1/g' $(find -type f -name \*.h -o -name \*.cpp)

    # use boost chrono and thread libraries
    $ sed -i -e 's/#include <chrono>/#include <boost\/chrono.hpp>/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/#include <thread>/#include <boost\/thread.hpp>/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/#include <mutex>/#include <boost\/thread\/mutex.hpp>/g' $(find -type f -name \*.h -o -name \*.cpp)

    $ sed -i -e 's/std::chrono/boost::chrono/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/std::thread/boost::thread/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/std::mutex/boost::mutex/g' $(find -type f -name \*.h -o -name \*.cpp)

    $ sed -i -e 's/ chrono/ boost::chrono/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/(chrono/(boost::chrono/g' $(find -type f -name \*.h -o -name \*.cpp)
    $ sed -i -e 's/<chrono/<boost::chrono/g' $(find -type f -name \*.h -o -name \*.cpp)

    $ sed -i -e 's/ thread/ boost::thread/g' $(find -type f -name \*.h -o -name \*.cpp)
    
    # place member initializations in constructors for several classes
    # split constructors that call other constructors into a shared private void init method that both constructors call
    # use boost for thread_local
    # replace stoi(m) with strtol(m.c_str(), NULL, 10)
    # replace random() with rand()

    # WE ARE FINALLY READY TO BUILD
    $ cd libethereum
    $ git checkout codeshark/winbuilds Makefile
    $ mkdir obj
    $ mkdir lib
    $ make

    $ cd ../eth
    $ git checkout codeshark/winbuilds Makefile
    $ mkdir obj
    $ make

    $ cd ../alethzero
    $ git checkout codeshark/winbuilds alephzero.pro
    $ /usr/x86_64-w64-mingw32/host/bin/qmake -spec win32-g++
    $ make

